#
# UML Generation
#

#
# Output formats
#
# - SVGZ
#   compressed SVG, needs a browser plugin to display
#
# - SVG
#   the default, needs a browser plugin to display
#
# - JPG
#   an alternative, if SVG does not work
#
# - GIF
#   an alternative, if SVG does not work
#
uml_file_format=JPG

#
# UML style sheet
#
# If no style is specified internal defaults
# (which mirror default.style) will be used.
#
uml_style=Silky_Hierarchy



#
# JPG quality
#
# Sets the quality level of JPG encoding.
# At a quality level of 1.0 the encoding will lead to no loss of
# data due to quantization. The lower the level the more loss
# of data will occur.
#
# This may range between 0.0 and 1.0 and is ignore for all
# output formats save JPG (obviously).
#
jpg_quality=1.0



#
# Image tiling
#
# Image tiling applies only to GIF and JPG output formats.
#
# -TRUE
#  yDoc will create multiple small images instead of a single large one,
#  if the image's width or height exceeds the corresponding maximum.
#
# -FALSE
#  yDoc will always create only one image per UML diagram.
#
img_tiling=TRUE
img_tiling_max_width=600
img_tiling_max_height=600



#
# SVG Display modi
#
# All display modi will preserve the diagram's actual aspect ratio.
#
# - FIXED_SIZE
#   the diagram will be displayed in a fixed size canvas (specified by
#   svg_display_width and svg_display_height)
#
# - ACTUAL_SIZE
#   the diagram will be displayed in a canvas sized to the diagram's
#   actual size
#   this mode ignores svg_display_width and svg_display_height
#
# - ACTUAL_SIZE_MAX_WIDTH
#   the diagram will be displayed in a canvas sized to the diagram's
#   actual size up to a fixed canvas width (specified by svg_display_width)
#   this mode ignores svg_display_height
#
# - ACTUAL_SIZE_MAX_HEIGHT
#   the diagram will be displayed in a canvas sized to the diagram's
#   actual size up to a fixed canvas height (specified by svg_display_height)
#   this mode ignores svg_display_width
#
# - ACTUAL_SIZE_MAX_WIDTH_MAX_HEIGHT
#   the diagram will be displayed in a canvas sized to the diagram's
#   actual size up to a fixed canvas size (specified by svg_display_width
#   and svg_display_height)
#
# - FIT_TO_SIZE_BY_WIDTH
#   the diagram will be scaled to fit into a canvas with fixed width
#   (specified by svg_display_width)
#   this mode ignores svg_display_height
#
# - FIT_TO_SIZE_BY_HEIGHT
#   the diagram will be scaled to fit into a canvas with fixed height
#   (specified by svg_display_height)
#   this mode ignores svg_display_width
#
# - FIT_TO_SIZE
#   the diagram will be scaled to fit into a canvas with fixed width
#   and fixed height (specified by svg_display_width and svg_display_height)
#
# - SHRINK_TO_SIZE_BY_WIDTH
#   the diagram will be scaled to fit into a canvas with fixed width
#   (specified by svg_display_width), unless it already fits
#   this mode ignores svg_display_height
#
# - SHRINK_TO_SIZE_BY_HEIGHT
#   the diagram will be scaled to fit into a canvas with fixed height
#   (specified by svg_display_height), unless it already fits
#   this mode ignores svg_display_width
#
# - SHRINK_TO_SIZE
#   the diagram will be scaled to fit into a canvas with fixed width
#   and fixed height (specified by svg_display_width and svg_display_height),
#   unless it already fits
#
svg_display_mode=SHRINK_TO_SIZE

#
# canvas width and height for SVG UML class diagrams
#
svg_display_width=600
svg_display_height=600

#
# - TRUE
#   always reserve a canvas area at least the size of
#   svg_display_width and svg_display_height
#
# - FALSE
#   always use the diagram's size after possible scaling
#
# Note
# This property is ignored for FIXED_SIZE
#
svg_display_reserve_minimum=TRUE



#
# SVG Workaround
#
# Due to changes in the plug-ins API in the gecko code base,
# the current version of the Adobe SVG Plugin 3.0 crashes browsers
# of the gecko family (Mozilla, Netscape 6+7, ...) when displaying
# HTML with embedded SVG images.
#
# There is an experimental workaround by wrapping the <EMBED> tag(s)
# in <IFRAME> tags. There is one significant disadvantage to this
# approach: It is no longer possible to use javascript based
# hyperlinks in SVG, which are  neccessary to make URI fragments
# work properly.
#
# - TRUE
#   use the SVG embedding workaround
#
# - FALSE
#   the default, do not use the SVG embedding workaround
#
svg_workaround=FALSE



#
# Garbage Collection Frequency
#
# - gc_frequency < 1:
#   No explicit garbage collection
#
# - gc_frequency >= 1;
#   Explicit garbage collection every xth diagram generation.
#   Note:
#   Although a value of 1 (explicit garbage collection after each diagram
#   generation) will keep the memory usage fairly low, this will severly impair
#   performance.
#
gc_frequency=0