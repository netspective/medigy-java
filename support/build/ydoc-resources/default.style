############################################################
#
# UML styles
#
############################################################

#
# General display options
#
# These settings default to TRUE.
#
# - YES
# - TRUE
#
# - NO
# - FALSE
#
uml_display_associations=TRUE
uml_display_packages=TRUE
uml_display_parameters=FALSE

#
# Dependency policy
#
# Determines the heuristic approach
# as to what constitutes a dependency
#
# If a specific type is an association,
# it will not appear as a dependecy, too.
#
#
# - ALL
#   any non-primitive type is considered a dependency
#
# - PARAMETERS-RETURNTYPE
#   any parameter types in constructor or method signatures
#   as well as all method return types are considered
#   a dependency
#
# - PARAMETERS
#   any parameter types in constructor or method signatures
#   are considered a dependency
#
# - NONE
#   no dependency list is created at all
#
uml_display_dependencies=PARAMETERS-RETURNTYPE

#
# Package dependencies
#
#  Determines wheter to display transitive dependencies.
#  A dependency a -> c is considered transitive,
#  iff there are dependencies a -> b and b -> c
#
#
# - ALL
#   all package dependencies are displayed
#
# - REDUCED
#   no transitive dependencies are displayed
#
#
uml_display_package_dependencies=REDUCED


#
# Ordering of Members
#
# Determines the order in which fields, constructors, and
# methods are displayed in type UML diagrams.
#
# These settings default to MOD-LEX.
#
# - MOD-LEX
#   Members are sorted according to their modifiers.
#   Modifiers are considered to imply the following order:
#     static public < public <
#     static protected < protected <
#     static package-private < package-private <
#     static private < private
#   If two (or more) members are equal according to this ordering,
#   they are sorted according to their qualified names
#   (and signatures in case of constructors and methods).
#
# - MOD-LEX-IC
#   Same as MOD-LEX, but case insensitive.
#
# - LEX
#   Members are sorted according to their qualified names
#   (and signatures in case of constructors and methods).
#
# - LEX-IC
#   Same as LEX, but case insensitive.
#
uml_display_order_fields=MOD-LEX
uml_display_order_constructors=MOD-LEX
uml_display_order_methods=MOD-LEX



#
# Exclusions
#
# Specifies a comma-separated list of full-qualified classname patterns
# to exclude from the appropriate relation list of the UML diagram.
# The '?' character denotes a wildcard of length one and
# the '*' character denotes a wildcard of arbitrary length.
#
# Example 0:
#   uml_exclude_pattern_dependencies=
# excludes nothing
#
# Example 1:
#   uml_exclude_pattern_dependencies=java.*,javax.*
# excludes all java and javax packages
#
# Example 2:
#   uml_exclude_pattern_dependencies=java*
# excludes all packages starting with java, including
# java and javax but also javadoc, etc.
#
# Example 3:
#   uml_exclude_pattern_dependencies=examples.SortedVector,*.Test
# excludes class SortedVector in package examples,
# as well as all classes Test in any packages
#
#
uml_exclude_pattern_associations=
uml_exclude_pattern_dependencies=
uml_exclude_pattern_generalizations=
uml_exclude_pattern_realizations=



############################################################
#
# Nodes section
#
############################################################


#
# Node types
#
#
# Abstract
#   node represents an abstract class
#
# Class
#   node represents a non-abstract class
#
# Interface
#   node represents an interface
#
# Package
#   node represents a package
#

#
# Node colors by type
#
#
# Properties defined here will be used to create Color instances
# via the java.awt.Color.decode(String definition) method.
#

uml_color_border_abstract=#B200B2
uml_color_border_class=#94A8A5
uml_color_border_interface=#B2B200
uml_color_border_package=#868686

uml_color_fill_abstract=#FF00FF
uml_color_fill_class=#D4F1EC
uml_color_fill_interface=#FFC800
uml_color_fill_package=#C0C0C0

uml_color_separator_abstract=#000000
uml_color_separator_class=#000000
uml_color_separator_interface=#000000

uml_color_shadow_abstract=#C0C0C0
uml_color_shadow_class=#C0C0C0
uml_color_shadow_interface=#C0C0C0
uml_color_shadow_package=#C0C0C0


uml_color_text_type_abstract=#000000
uml_color_text_field_abstract=#000000
uml_color_text_constructor_abstract=#000000
uml_color_text_method_abstract=#000000
uml_color_text_constraint=#000000

uml_color_text_type_class=#000000
uml_color_text_field_class=#000000
uml_color_text_constructor_class=#000000
uml_color_text_method_class=#000000

uml_color_text_type_interface=#000000
uml_color_text_field_interface=#000000
uml_color_text_method_interface=#000000
uml_color_text_stereotype=#000000

uml_color_text_package=#000000


#
# Node fonts by type
#
#
# Properties defined here will be used to create Font instances
# via the java.awt.Font.decode(String definition) method.
#
# Definition format:
#   "fontfamilyname-style-pointsize" or
#   "fontfamilyname style pointsize"
#
# - fontfamilyname
#   This can be a logical font name or a font face name.
#   A logical name must be either: Dialog, DialogInput, Monospaced, Serif, or SansSerif.
#
# - style
#   Must be either: PLAIN, BOLD, ITALIC, or BOLDITALIC
#
#
# Note:
# The property uml_font_type_* does NOT refer to the font type,
# but the Java type (class or interface) name for the node
#

uml_font_type_abstract=Dialog-BOLD-16
uml_font_field_abstract=Dialog-PLAIN-12
uml_font_constructor_abstract=Dialog-PLAIN-12
uml_font_method_abstract=Dialog-PLAIN-12
uml_font_compact_abstract=Dialog-BOLD-13

uml_font_type_class=Dialog-BOLD-16
uml_font_field_class=Dialog-PLAIN-12
uml_font_constructor_class=Dialog-PLAIN-12
uml_font_method_class=Dialog-PLAIN-12
uml_font_compact_class=Dialog-BOLD-13

uml_font_type_interface=Dialog-BOLDITALIC-16
uml_font_field_interface=Dialog-ITALIC-12
uml_font_method_interface=Dialog-ITALIC-12
uml_font_compact_interface=Dialog-BOLDITALIC-13

uml_font_package=Dialog-PLAIN-12

uml_font_constraint=Dialog-PLAIN-12
uml_font_stereotype=Dialog-PLAIN-12

#
# Node shadow styles by type
# Valid shadow styles:
#
# - NONE
#
# - NORTH
#
# - WEST
#
# - SOUTH
#
# - EAST
#
# - NORTH-WEST
#
# - NORTH-EAST
#
# - SOUTH-WEST
#
# - SOUTH-EAST
#

uml_shadow_abstract=NONE
uml_shadow_class=NONE
uml_shadow_interface=NONE
uml_shadow_package=NONE

#
# Node shapes by type
#
#
# Shapes used to display central node
# Valid shapes:
#
# - RECTANGLE
#
# - RECTANGLE_3D
#   this style ignores uml_color_border_* property
#
# - ROUND_RECTANGLE
#

uml_shape_abstract=RECTANGLE_3D
uml_shape_class=RECTANGLE_3D
uml_shape_interface=RECTANGLE_3D
uml_shape_package=RECTANGLE

#
# Compact node shapes by type
#
#
# Shapes used to display nodes in
#   association,
#   dependency,
#   generalization, and
#   realization
# lists
# Valid compact shapes:
#
# - DIAMOND
#
# - ELLIPSE
#
# - HEXAGON
#
# - OCTAGON
#
# - PARALLELOGRAM
#
# - RECTANGLE
#
# - RECTANGLE_3D
#
# - ROUND_RECTANGLE
#
# - TRAPEZOID
#
# - TRAPEZOID_2
#

uml_shape_compact_abstract=RECTANGLE_3D
uml_shape_compact_class=RECTANGLE_3D
uml_shape_compact_interface=RECTANGLE_3D



############################################################
#
# Edges/Lines section
#
############################################################

#
# Line types
#
#
# Association:
#   structural relationship between a whole and its parts,
#   i.e. "has a" or "instantiates"
#
# Dependency:
#   semantic relationship in which a change to one thing may effect
#   the semantics of the other thing
#
# Generalization:
#   specialization/generalization relationship,
#    i.e. "is a" or "subclass/superclass"
#
# Realization:
#   semantic relationship between classifiers,
#   i.e. "interface/implementing class"
#
# Package Dependency:
#   relationship of any kind between members of different packages
#

#
# Line colors by type
#

uml_line_color_association=#000000
uml_line_color_dependency=#000000
uml_line_color_generalization=#000000
uml_line_color_realization=#000000
uml_line_color_package_dependency=#000000

#
# Line styles by type
#
#
# A line style is given as
#   <type>_<thickness>
# Valid line styles:
#
# - DASHED_1
# - DASHED_2
# - DASHED_3
# - DASHED_4
# - DASHED_5
#
# - LINE_1
# - LINE_2
# - LINE_3
# - LINE_4
# - LINE_5
#

uml_line_style_association=LINE_1
uml_line_style_dependency=DASHED_1
uml_line_style_generalization=LINE_1
uml_line_style_realization=DASHED_1
uml_line_style_package_dependency=LINE_1

#
# Valid source/target arrows
#
# - CIRCLE
#   A unicolored arrow that has the shape of a circle.
# - DELTA
#   A unicolored arrow that has the shape of a triangle.
# - DIAMOND
#   A unicolored arrow that has the shape of a diamond.
# - NONE
#   An arrow that does not have a graphical representation.
# - SHORT
#   An arrow that is short and broad.
# - STANDARD
#   A unicolored arrow that has the shape of a triangle with impressed bottom side.
# - WHITE_CIRCLE
#   An arrow that has the shape of a circle.
# - WHITE_DELTA
#   An arrow that has the shape of a triangle.
# - WHITE_DIAMOND
#   An arrow that has the shape of a diamond.
# - UML
#   An arrow that has the shape of a wedge ">"
#

uml_line_arrow_source_association=NONE
uml_line_arrow_source_dependency=NONE
uml_line_arrow_source_generalization=NONE
uml_line_arrow_source_realization=NONE
uml_line_arrow_source_package_dependency=NONE

uml_line_arrow_target_association=UML
uml_line_arrow_target_dependency=UML
uml_line_arrow_target_generalization=WHITE_DELTA
uml_line_arrow_target_realization=WHITE_DELTA
uml_line_arrow_target_package_dependency=UML

#
# Valid bends
#
# - ANGLE
#
# - ARC
#
uml_line_bends_association=ANGLE
uml_line_bends_dependency=ANGLE
uml_line_bends_generalization=ANGLE
uml_line_bends_realization=ANGLE
uml_line_bends_package_dependency=ANGLE

#
# Line routing
#
# - ORTHOGONAL
#
# - POLYLINE
#
uml_line_routing_package_dependency=POLYLINE



############################################################
#
# Miscellaneous stuff section
#
############################################################

#
# Various numeric properties
#
# Note:
# It is recommended that
#   uml_shadow_length < uml_package_inset
# holds.
#
uml_package_inset=5
uml_package_distance=30
uml_shadow_length=3
